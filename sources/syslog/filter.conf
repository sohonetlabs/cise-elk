# Grok Filter for SSH Failed Password
filter{
  if ( [type] == "syslog" ) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{SSH_FAILED_PASSWORD}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => [ "SSH", "SSH_FAILED_PASSWORD" ]
      add_field => { "event_type" => "SSH_FAILED_PASSWORD" }
    }
  }
}

# Grok Filter for SSH Invalid User
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{SSH_INVALID_USER}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => [ "SSH", "SSH_INVALID_USER" ]
      add_field => { "event_type" => "SSH_INVALID_USER" }
    }
  }
}

# Grok Filter for Sudo Auth Failure
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{SUDO_AUTH_FAILURE}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => [ "SUDO", "SUDO_AUTH_FAILURE" ]
      add_field => { "event_type" => "SUDO_AUTH_FAILURE" }
    }
  }
}

filter {
# Grok Filter for SSH Password Accepted
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{SSH_ACCEPTED_PASSWORD}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => [ "SSH", "SSH_ACCEPTED_PASSWORD" ]
      add_field => { "event_type" => "SSH_ACCEPTED_PASSWORD" }
    }
  }
}

# Grok Filter for SSH Public Key Accepted
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{SSH_ACCEPTED_PUBLICKEY}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => [ "SSH", "SSH_ACCEPTED_PUBLICKEY" ]
      add_field => { "event_type" => "SSH_ACCEPTED_PUBLICKEY" }
    }
  }
}

# Grok Filter for Junos IDP Logs
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {

    grok {
      match => {
        "message" => [
          "%{JUNOS_IDP}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => "junos_idp"
    }
  }
}

# Grok Filter for tripwire Logs
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{TRIPWIRE}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => "tripwire"
    }

    mutate {
      convert => {
        "tripwire_added" => "integer"
        "tripwire_created" => "integer"
        "tripwire_removed" => "integer"
        "tripwire_severity" => "integer"
        "tripwire_violations" => "integer"
      }
    }
  }
}

# Grok Filter for UNIFI Devices
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} \(%{WORD:firmware_branch},%{BASE16FLOAT:unifi_macaddress},%{PROG:firmware_version}\) %{DATA:syslog_program}: %{GREEDYDATA:syslog_message}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => "unifi_syslog"
    }
  }
}

# Grok Filter for ScreenOS Devices
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{IPORHOST}: NetScreen device_id=%{IPORHOST} %{GREEDYDATA:syslog_message}"
          ]
      }
      patterns_dir => "/etc/logstash/patterns"
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => "screenos_syslog"
    }
  }
}

# Squid Access Logs
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {
    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{SQUID_ACCESS_LOG}",
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{COMMONAPACHELOG} %{NOTSPACE:squid_request_status}:%{NOTSPACE:squid}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => "squid_access_log"
    }
  }

  if ( "squid_access_log" in [tags]) {
    if ( "" in [request]){
      grok {
        match => {
          "request" => [ "(?:%{URIPROTO:uriproto}://)?(?:%{USER:uriuser}(?::[^@]*)?@)?(?:%{IPORHOST:urihost}(?::%{POSINT:port})?)?(?:%{URIPATHPARAM:uripathparm})?" ]
        }
        break_on_match => true
        remove_tag => ["_grokparsefailure"]
      }
    }

    # Extract second level domain from urihost
    ruby {
      code => "if /co.uk/.match(event['urihost']);
                 event['second_level_domain'] = event['urihost'].gsub(/.*\.(.*\.co.uk)/, '\1');
               else;
                 event['second_level_domain'] = event['urihost'].gsub(/.*\.(.*\..*)/, '\1');
               end"
    }
  }
}

# Grok Filter for OpenVPN
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags] ) {

    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} openvpn %{GREEDYDATA:openvpn_log}"]
      }
      patterns_dir => "/etc/logstash/patterns"
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      add_field => [ "syslog_program", "openvpn" ]
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => "openvpn_syslog"
    }
    if ( "openvpn_syslog" in [tags] ) {

      # Check for success
      if ( "primary virtual IP for" in [openvpn_log] ) {
        grok {
          match => {
            "openvpn_log" => [
              "%{OPENVPN_SUCCESS}"
              ]
          }
          patterns_dir => "/etc/logstash/patterns"
          break_on_match => true
          add_field => [ "event_type", "OPENVPN_AUTH_SUCCESS" ]
        }
        geoip {
          source => "src_ip"
          target => "geoip"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
      }

      # Check for Auth Failed
      if ( "AUTH_FAILED" in [openvpn_log] ) {
        grok {
           match => {
             "openvpn_log" => [
               "%{OPENVPN_FAILED}"
               ]
           }
           patterns_dir => "/etc/logstash/patterns"
           break_on_match => true
           add_field => [ "event_type", "OPENVPN_AUTH_FAILED" ]
         }
	 geoip {
           source => "src_ip"
           target => "geoip"
           add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
           add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
         }
       }
     }
   }
}

#Sonicwall Filter
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {
    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>id=firewall sn=%{WORD:sn} time=\"%{TIMESTAMP_ISO8601:time}\" %{GREEDYDATA:log}",
          "<%{POSINT:syslog_pri}>id=firewall sn=%{WORD:sn} time=\"%{TIMESTAMP_ISO8601:time} %{TZ:timezone}\" %{GREEDYDATA:log}"
          ]
      }
      patterns_dir => "/etc/logstash/patterns"
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "syslog_hostname", "%{host}" ]
      add_field => [ "received_from", "%{host}" ]
      add_field => [ "id", "firewall" ]
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      add_tag => "sonicwall_syslog"
      break_on_match => true
    }
    kv {
      source => "log"
    }
  }

  # Additional sonicwal parsing
  if ("sonicwall_syslog" in [tags] ) {
    # Extract source data
    if ("" in [src]){
      grok {
        match => {
          "src" => [
            "%{IPORHOST:src_ip}:%{NUMBER:src_port}:%{GREEDYDATA:src_interface}"
            ]
        }
        break_on_match => true
      }
      geoip {
            source => "src_ip"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
    }
    # Extract Destination data
    if ("" in [dst]){
      grok {
        match => {
          "dst" => [
            "%{IPORHOST:dst_ip}:%{NUMBER:dst_port}:%{GREEDYDATA:dst_interface}"
            ]
        }
        break_on_match => true
      }
      geoip {
            source => "dst_ip"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
    }
  }
}

# Grok Filters for General Linux Syslog Format
filter {
  if ( [type] == "syslog" and "_grokparsefailure" in [tags]) {
    grok {
      match => {
        "message" => [
          "<%{POSINT:syslog_pri}>%{SYSLOG_TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{GREEDYDATA:syslog_message}"
        ]
      }
      patterns_dir => "/etc/logstash/patterns"
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      named_captures_only => true
      remove_tag => ["_grokparsefailure"]
      break_on_match => true
      add_tag => "linux_syslog"
    }
  }
}


# Generic syslog cleanup
filter {
  if ( [type] == "syslog" ) {
    if !("_grokparsefailure" in [tags]) {

      syslog_pri { }

      date {
        match => [ "syslog_timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601" ]
      }

      mutate {
        replace => [ "@source_host", "%{syslog_hostname}" ]
        replace => [ "@message", "%{message}" ]
        remove_field => [ "message" ]
      }

      # If hostname is IP address, copy to syslog_ip key
      if ("" not in [syslog_ip]) {
        grok {
          match => { "syslog_hostname" => "%{IP:syslog_ip}" }
        }
        mutate {
          remove_tag => [ "_grokparsefailure" ]
        }
      }

    }
  }
}
